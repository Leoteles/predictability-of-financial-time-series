close all;
clear all;
clc;

randn('state',0);

Nsur = 100;
N = 1000;
algoritmo = 'alg1';%Algoritmo utilizado

serie(1) = randn;
for j = 2:N
    serie(j) = 0.3*serie(j-1) + randn;
end

%Gera sub-rogados
z = geraSurrogates(serie,algoritmo,Nsur);


%Calcula a SampEn para os Surrogates
epsilon = 0.2 * std(serie);
m = 2;

for n = 1:Nsur
    %Mostra status atual do calculo
    if (~mod(n,10) || n==Nsur)
        str = sprintf('Calculando SampEn para sub-rogados... %g%% concluido', (100*n)/Nsur);
        disp(str);
    end
    
    %Como o resultado do sampen é calculado para m=0,1,...,m-1, deve-se chamar a
    %função com m+1 e pegar o ultimo elemento do resultado. Esse será o
    %sampen(m)
    SampEn = calculaSampEn(z(:,n),m+1,epsilon);
    SampEn_sur(n) = SampEn(end);
end

%Calcula a estatistica SampEn para a serie original
disp('Calculando SampEn para série original.');

%Como o resultado do sampen é calculado para m=0,1,...,m-1, deve-se chamar a
%função com m+1 e pegar o ultimo elemento do resultado. Esse será o
%sampen(m)
SampEn = calculaSampEn(serie,m+1,epsilon);
SampEn_serie = SampEn(end);

%Compara a estatistica SampEn da serie e surrogates
Nbins = 20;
[n,x] = hist(SampEn_sur,Nbins);
%n = n / (sum(n) * (x(2)-x(1)));%Normaliza para que fique em função da probabilidade
n = n / (sum(n));%Normaliza para que fique em função da probabilidade

figure;
bar(x,n,'FaceColor',[.89 .94 .9],'EdgeColor','k');
hold on;
line([SampEn_serie SampEn_serie],[0 max(n)*1.3],'Color','r','LineWidth',3);%Linha que indica SampEn para a série original
str = sprintf('SampEn Série Orignal: %g', SampEn_serie);
legend('Hist. norm. dos Sub-rogados',str,'location','northeast');
str = sprintf('SampEn(%g,\\epsilon,%g) para \\epsilon=%g',m,length(serie),epsilon);
xlabel(str);
ylabel('Distribuição dos Dados Sub-rogados');
hold off;
