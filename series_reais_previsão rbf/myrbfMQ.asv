%Treina rede rbf com os parametros descritos abaixo
%function [w1,w2] = myrbf(entradas,saida,Nneuronios)
%A camada escondida é treinada por meio de MQ clássico
function [w1,w2] = myrbfMQ(x,yd,Nneu)

N = size(x,2);%Número de "vetores cluna" de entrada.
N_dimensoes = size(x,1);%Número de elementos de cada vetor de entrada

tic
disp('kmeans...')
[w,y] = mykmeans(x,Nneu);
toc

c = w;%Define os centros

%Define w1, igual aos centros e aos raios
sigma = calculaRaios(c,'mediamenor',x,y);
%sigma = calculaRaios(c,'menor',x,y);
%sigma = calculaRaios(c,'desvio',x,y);

w1 = [c; sigma];

%Calcula entradas e saida da camada de saida da rede
for i=1:Nneu%Para todos os neuronios
    for j=1:N%Para todos os dados de entrada
        %Distancia do vetor de entrada i ao centro j
        u = norm(x(:,j)-c(:,i));
        %Saida da camada escondida GAUSSIANA
        %Cada coluna j tem a resposta de cada neuronio i ao estimulo j
        y1(i,j) = exp( -(u^2) / (2*sigma(i)^2) );
    end
end

y1 = [ones(1,N); y1];%K+1 elementos, por causa do bias


%Estimação dos parametros da segunda camada por MQ classico
psi = y1';%Os dados devem estar em linhas e nao em colunas
yd = yd';
% size(psi)
% size(yd)
tetaMQ = inv(psi'*psi)*psi'*yd;
yMQ = psi * tetaMQ;

w2 = tetaMQ';


end


function sigma = calculaRaios(c,alg,x,y)

Nneu = size(c,2);

%Calculo dos raios
for i=1:Nneu%Calcula a distancia entre os centros

    %Inicializa a variável "menor distancia" com a distância ao próx. vetor
    if (i~=Nneu)%Quando o vetor i for o último, inicializa coma dist. entre ele e o primeiro
        menor(i) = norm(c(:,i)-c(:,i+1));
    else
        menor(i) = norm(c(:,i)-c(:,1));
    end
    
    %Encontra menor distancia do vetor i
    for j=1:Nneu%roda em todos os vetor j,
        if (i~=j)%em que j é diferente de i
            dist = norm(c(:,i)-c(:,j));
            if (dist<menor(i))
                menor(i) = dist;
            end
        end
    end
end

if strcmp(alg,'mediamenor')
    %Procedimento 1: Todos os raios iguais
    %Calcula sigma, o raio dos neuronios
    sigma = ones(1,Nneu) * mean(menor);
end
if strcmp(alg,'menor')
    %Procedimento 2: Raios diferentes, menor distancia entre os centros
    %Calcula sigma, o raio dos neuronios
    sigma = menor;
end
if strcmp(alg,'desvio')
    %Procedimento 3: Raios diferentes, desvio padrao dos dados que participam
    %dos centros
    % %Calcula sigma, o raio dos neuronios
    N = size(x,2);%Número de vetores de entrada
    for i=1:Nneu
        somatorio = 0;
        N_x = 0;
        for j=1:N
            if (y(j)==i)
                somatorio = somatorio + (norm(c(:,i)-x(:,j))^2);
                N_x = N_x + 1;
            end
        end
        %N_x
        sigma(i) =sqrt(somatorio/N_x);
    end
end
end